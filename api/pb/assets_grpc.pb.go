// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AssetManagementClient is the client API for AssetManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssetManagementClient interface {
	Create(ctx context.Context, in *Asset, opts ...grpc.CallOption) (*Id, error)
	Get(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Asset, error)
	List(ctx context.Context, in *SearchQuery, opts ...grpc.CallOption) (AssetManagement_ListClient, error)
}

type assetManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewAssetManagementClient(cc grpc.ClientConnInterface) AssetManagementClient {
	return &assetManagementClient{cc}
}

func (c *assetManagementClient) Create(ctx context.Context, in *Asset, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/pb.AssetManagement/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetManagementClient) Get(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Asset, error) {
	out := new(Asset)
	err := c.cc.Invoke(ctx, "/pb.AssetManagement/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetManagementClient) List(ctx context.Context, in *SearchQuery, opts ...grpc.CallOption) (AssetManagement_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &AssetManagement_ServiceDesc.Streams[0], "/pb.AssetManagement/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &assetManagementListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AssetManagement_ListClient interface {
	Recv() (*Asset, error)
	grpc.ClientStream
}

type assetManagementListClient struct {
	grpc.ClientStream
}

func (x *assetManagementListClient) Recv() (*Asset, error) {
	m := new(Asset)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AssetManagementServer is the server API for AssetManagement service.
// All implementations must embed UnimplementedAssetManagementServer
// for forward compatibility
type AssetManagementServer interface {
	Create(context.Context, *Asset) (*Id, error)
	Get(context.Context, *Id) (*Asset, error)
	List(*SearchQuery, AssetManagement_ListServer) error
	mustEmbedUnimplementedAssetManagementServer()
}

// UnimplementedAssetManagementServer must be embedded to have forward compatible implementations.
type UnimplementedAssetManagementServer struct {
}

func (UnimplementedAssetManagementServer) Create(context.Context, *Asset) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAssetManagementServer) Get(context.Context, *Id) (*Asset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedAssetManagementServer) List(*SearchQuery, AssetManagement_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedAssetManagementServer) mustEmbedUnimplementedAssetManagementServer() {}

// UnsafeAssetManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssetManagementServer will
// result in compilation errors.
type UnsafeAssetManagementServer interface {
	mustEmbedUnimplementedAssetManagementServer()
}

func RegisterAssetManagementServer(s grpc.ServiceRegistrar, srv AssetManagementServer) {
	s.RegisterService(&AssetManagement_ServiceDesc, srv)
}

func _AssetManagement_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Asset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetManagementServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AssetManagement/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetManagementServer).Create(ctx, req.(*Asset))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetManagement_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetManagementServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AssetManagement/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetManagementServer).Get(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetManagement_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AssetManagementServer).List(m, &assetManagementListServer{stream})
}

type AssetManagement_ListServer interface {
	Send(*Asset) error
	grpc.ServerStream
}

type assetManagementListServer struct {
	grpc.ServerStream
}

func (x *assetManagementListServer) Send(m *Asset) error {
	return x.ServerStream.SendMsg(m)
}

// AssetManagement_ServiceDesc is the grpc.ServiceDesc for AssetManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AssetManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.AssetManagement",
	HandlerType: (*AssetManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AssetManagement_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _AssetManagement_Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _AssetManagement_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "assets.proto",
}
