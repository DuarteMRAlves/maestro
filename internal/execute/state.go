package execute

import (
	"fmt"

	"github.com/DuarteMRAlves/maestro/internal"
)

// offlineState defines a structure to store the state of an offline pipeline.
type offlineState struct {
	msg internal.Message
}

func newOfflineState(msg internal.Message) offlineState {
	return offlineState{msg: msg}
}

func (s offlineState) String() string {
	return fmt.Sprintf("offlineState{msg:%v}", s.msg)
}

type id int

// onlineState defines a structure to store the state of an online pipeline. It
// is created in a source stage with a unique id, that is transferred throughout
// the pipeline, identifying messages that were generated by applying
// transformations to the original message and allowing for parallel branches to
// be synchronized.
type onlineState struct {
	id  id
	msg internal.Message
}

var emptyOnlineState = newOnlineState(-1, nil)

func newOnlineState(id id, msg internal.Message) onlineState {
	return onlineState{
		id:  id,
		msg: msg,
	}
}

func fromOnlineState(s onlineState, msg internal.Message) onlineState {
	return newOnlineState(s.id, msg)
}

func (s onlineState) String() string {
	return fmt.Sprintf("onlineState{id:%d,msg:%v}", s.id, s.msg)
}
