package input

import (
	"github.com/DuarteMRAlves/maestro/internal/errdefs"
	"github.com/DuarteMRAlves/maestro/internal/flow/flow"
	"github.com/DuarteMRAlves/maestro/internal/flow/state"
)

// Input joins the input flows for a given stage and provides the next
// State to be processed.
type Input interface {
	Next() *state.State
}

// Cfg represents the several input flows for a stage
type Cfg struct {
	typ   Type
	flows []*flow.Flow
}

// Type defines the type of input that the stage.Stage associated with this
// Cfg is expecting.
type Type string

const (
	// InputInfer means the input type is not specified and should be inferred
	// from the received connections.
	InputInfer Type = "Infer"
	// InputSingle means the stage only receives input from another stage.
	InputSingle Type = "Single"
	// InputSource means the stage is a source stage and receives as input an
	// empty message that should be generated by the orchestrator.
	InputSource Type = "Source"
	// InputMerge means the input is a merge of multiple different messages,
	// coming from different stages.
	InputMerge Type = "Merge"
	// InputCollect means the input collects from multiple stages, but the
	// received messages are all equal and should be directly sent to this
	// input stage.
	InputCollect Type = "Collect"
)

func NewInputCfg() *Cfg {
	return &Cfg{
		typ:   InputInfer,
		flows: []*flow.Flow{},
	}
}

func (i *Cfg) Register(f *flow.Flow) error {
	l := f.Link
	// A previous link that consumes the entire message already exists
	if len(i.flows) == 1 && i.flows[0].Link.TargetField() == "" {
		return errdefs.FailedPreconditionWithMsg(
			"link that receives the full message already exists")
	}
	for _, prev := range i.flows {
		if prev.Link.TargetField() == l.TargetField() {
			return errdefs.InvalidArgumentWithMsg(
				"link with an equal name already registered: %s",
				l.Name())
		}
	}
	i.flows = append(i.flows, f)
	return nil
}

func (i *Cfg) UnregisterIfExists(search *flow.Flow) {
	idx := -1
	for j, f := range i.flows {
		if f.Link.Name() == search.Link.Name() {
			idx = j
			break
		}
	}
	if idx != -1 {
		i.flows[idx] = i.flows[len(i.flows)-1]
		i.flows = i.flows[:len(i.flows)-1]
	}
}

func (i *Cfg) ToInput() Input {
	switch len(i.flows) {
	case 1:
		return &SingleInput{flow: i.flows[0]}
	}
	return nil
}

// SingleInput is a struct the implements the Input for a single input
type SingleInput struct {
	flow *flow.Flow
}

func (i *SingleInput) Next() *state.State {
	return i.flow.Queue.Pop().(*state.State)
}
