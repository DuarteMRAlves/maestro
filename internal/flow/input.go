package flow

import (
	"github.com/DuarteMRAlves/maestro/internal/errdefs"
	"github.com/DuarteMRAlves/maestro/internal/link"
)

// Input joins the input flows for a given stage and provides the next
// State to be processed.
type Input interface {
	In() <-chan *State
}

// InputCfg represents the several input flows for a stage
type InputCfg struct {
	typ   InputType
	links []*link.Link
}

// InputType defines the type of input that the stage.Stage associated with this
// InputCfg is expecting.
type InputType string

const (
	// InputInfer means the input type is not specified and should be inferred
	// from the received connections.
	InputInfer InputType = "Infer"
	// InputSingle means the stage only receives input from another stage.
	InputSingle InputType = "Single"
	// InputSource means the stage is a source stage and receives as input an
	// empty message that should be generated by the orchestrator.
	InputSource InputType = "Source"
	// InputMerge means the input is a merge of multiple different messages,
	// coming from different stages.
	InputMerge InputType = "Merge"
	// InputCollect means the input collects from multiple stages, but the
	// received messages are all equal and should be directly sent to this
	// input stage.
	InputCollect InputType = "Collect"
)

func newInputCfg() *InputCfg {
	return &InputCfg{
		typ:   InputInfer,
		links: []*link.Link{},
	}
}

func (i *InputCfg) register(l *link.Link) error {
	// A previous link that consumes the entire message already exists
	if len(i.links) == 1 && i.links[0].TargetField() == "" {
		return errdefs.FailedPreconditionWithMsg(
			"link that receives the full message already exists")
	}
	for _, prev := range i.links {
		if prev.TargetField() == l.TargetField() {
			return errdefs.InvalidArgumentWithMsg(
				"link with an equal name already registered: %s",
				l.Name())
		}
	}
	i.links = append(i.links, l)
	return nil
}

func (i *InputCfg) unregisterIfExists(search *link.Link) {
	idx := -1
	for j, l := range i.links {
		if l.Name() == search.Name() {
			idx = j
			break
		}
	}
	if idx != -1 {
		i.links[idx] = i.links[len(i.links)-1]
		i.links = i.links[:len(i.links)-1]
	}
}

func (i *InputCfg) ToFlow() Input {
	return nil
}
